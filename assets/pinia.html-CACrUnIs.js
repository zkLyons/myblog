import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as n,o as e}from"./app-DGgh6N6k.js";const t={};function l(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="pinia" tabindex="-1"><a class="header-anchor" href="#pinia"><span>pinia</span></a></h1><h2 id="大仓库和小仓库的区别" tabindex="-1"><a class="header-anchor" href="#大仓库和小仓库的区别"><span>大仓库和小仓库的区别</span></a></h2><p>大仓库（Pinia 实例）和用户小仓库（Store 实例）是 Pinia 状态管理库中的两个核心概念，它们的关系可以类比为 <strong>一个大型购物中心（大仓库）和里面的一家家独立店铺（小仓库）</strong>。</p><h3 id="大仓库-pinia-实例" tabindex="-1"><a class="header-anchor" href="#大仓库-pinia-实例"><span>大仓库（Pinia 实例）</span></a></h3><p><strong>大仓库</strong> 是整个应用程序 <strong>全局状态的容器</strong>，由 <code>createPinia()</code> 方法创建。它通常在应用程序的入口文件 (<code>main.js</code>) 中被创建一次，并被注入到 Vue 应用中。</p><ul><li><p><strong>唯一性</strong>：整个应用中只有一个大仓库实例。</p></li><li><p><strong>作用</strong>：它像一个中央调度中心，负责管理所有小仓库，并提供一些全局功能，例如插件（plugins）支持。当你使用 <code>pinia.use()</code> 安装 Pinia 插件时，这些插件会作用于所有的小仓库。</p></li><li><p><strong>代码示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">createPinia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;pinia&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> pinia</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createPinia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建大仓库实例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pinia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 注入到 Vue 应用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="小仓库-store-实例" tabindex="-1"><a class="header-anchor" href="#小仓库-store-实例"><span>小仓库（Store 实例）</span></a></h3><p><strong>小仓库</strong> 是由 <code>defineStore()</code> 方法创建的，它包含了特定模块（如用户、购物车、设置等）的状态、计算属性和操作。每个小仓库都是 <strong>独立的、模块化的</strong>。</p><ul><li><p><strong>多重性</strong>：你的应用程序可以有多个小仓库，每个小仓库管理一个特定功能模块的状态。</p></li><li><p><strong>作用</strong>：它封装了业务逻辑，使得代码组织清晰、易于维护。例如，<code>userStore</code> 只处理用户相关的状态和操作，<code>cartStore</code> 只处理购物车相关的。</p></li><li><p><strong>代码示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// store/modules/user.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">defineStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;pinia&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> useUserStore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;user&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  state</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    token</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;xxx&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;张三&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  actions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    login</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="它们的联系" tabindex="-1"><a class="header-anchor" href="#它们的联系"><span>它们的联系</span></a></h3><p>虽然大仓库和小仓库在概念上是独立的，但它们之间存在一种 <strong>父子关系</strong>。当你通过 <code>const userStore = useUserStore()</code> 来使用一个小仓库时，Pinia 实际上是在幕后：</p><ol><li><strong>找到大仓库实例</strong>（通过 Vue 上下文或手动传入）。</li><li><strong>在小仓库中创建响应式状态</strong>。</li><li><strong>将这个小仓库实例挂载到大仓库上</strong>，使其成为全局状态的一部分。</li></ol><p>这就像一个店铺在购物中心里开业：店铺（小仓库）是独立的，但它必须在购物中心（大仓库）这个统一的框架下运行，才能被顾客（Vue 组件）找到和访问。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><strong>大仓库（Pinia 实例）</strong>：<strong>唯一的、全局的</strong> 容器，负责管理所有小仓库，并提供全局功能。</li><li><strong>小仓库（Store 实例）</strong>：<strong>多个的、模块化的</strong> 状态管理单元，负责封装特定功能模块的业务逻辑。</li></ul><p>这种设计使得状态管理既能保持模块化和高内聚，又能通过一个统一的入口 (<code>pinia</code>) 进行全局管理，从而大大提升了大型应用的可维护性。</p><hr><h2 id="vue组件内和组件外引用小仓库" tabindex="-1"><a class="header-anchor" href="#vue组件内和组件外引用小仓库"><span>vue组件内和组件外引用小仓库</span></a></h2><p>在非vue组件内，例如permission.ts 文件中需要传入 <code>pinia</code> 实例，而在 Vue 组件中不需要，这通常是因为 <strong>代码运行环境和 Pinia 的初始化时机不同</strong>。</p><h3 id="_1-vue-组件中的情况" tabindex="-1"><a class="header-anchor" href="#_1-vue-组件中的情况"><span>1. Vue 组件中的情况</span></a></h3><p>在 Vue 组件中，Pinia 是在应用程序的入口文件（通常是 <code>main.js</code>）中，通过 <code>app.use(pinia)</code> 进行了全局注册。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">createApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">createPinia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;pinia&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> App</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> app</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> pinia</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createPinia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pinia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这里进行了全局注册</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;#app&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 Pinia 被这样全局注册后，它会把 <strong>大仓库</strong> 实例（也就是 <code>pinia</code>）挂载到 Vue 应用程序的上下文上。因此，当你在一个 Vue 组件的 <code>setup</code> 函数中调用 <code>const userStore = useUserStore()</code> 时，Pinia 能够自动从当前 Vue 组件实例的上下文中找到那个全局注册的 <strong>大仓库</strong> 实例，并把 <strong>小仓库</strong>（<code>userStore</code>）绑定到它上面。</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-vue"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">//vue组件中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> useStore</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./store/modules/user&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//这里也可以传入全局的pinia参数，但是pinia v2之后，就不是必须了，应用程序已经通过 app.use(pinia) 将 pinia 挂载到 Vue 实例上，那么 useUserStore() 函数会自动找到并使用它，你就不需要手动传入了</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//let useUserStore = useStore(pinia)  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> useUserStore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-permission-ts-文件中的情况" tabindex="-1"><a class="header-anchor" href="#_2-permission-ts-文件中的情况"><span>2. <code>permission.ts</code> 文件中的情况</span></a></h3><p><code>permission.ts</code> 通常是一个独立的 JavaScript/TypeScript 文件，它不在 Vue 组件的生命周期中运行。</p><p>在这种情况下，<code>permission.ts</code> 是在 <code>main.js</code> 中被 <code>import</code> 进来的，但它本身并 <strong>不处于 Vue 应用的上下文中</strong>。因此，当你直接在 <code>permission.ts</code> 中调用 <code>useUserStore()</code> 时，它无法像组件那样自动找到全局的 <code>pinia</code> 实例。</p><p>为了解决这个问题，你必须 <strong>手动将大仓库 <code>pinia</code> 实例作为参数传入</strong> 小仓库的 <code>useUserStore()</code> 函数中，明确告诉它：“嘿，请把这个小仓库绑定到我传给你的这个大仓库上。”</p><p>JavaScript</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>// permission.ts</span></span>
<span class="line"><span>import { createRouter, createWebHashHistory } from &#39;vue-router&#39;</span></span>
<span class="line"><span>import pinia from &#39;./store&#39; // 导入大仓库</span></span>
<span class="line"><span>import useUserStore from &#39;./store/modules/user&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const userStore = useUserStore(pinia) // 手动传入大仓库，显式绑定</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 路由守卫逻辑...</span></span>
<span class="line"><span>router.beforeEach(async (to, from, next) =&gt; {</span></span>
<span class="line"><span>  if (userStore.token) {</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**总结来说，**在 Vue 组件中，你像一个“特权公民”，能自动访问到全局注册的 Pinia 大仓库；而在 <code>permission.ts</code> 中，你就像一个“外部访客”，必须通过手动传入的方式来获取访问权限。</p><p>这个差异是 Pinia 内部设计的一个细节，确保了 Pinia Store 无论在 Vue 组件内部还是外部文件（如路由守卫、异步请求拦截器等）都能正确地被实例化和使用。</p>`,33)]))}const k=i(t,[["render",l]]),d=JSON.parse('{"path":"/notes/%E5%89%8D%E7%AB%AF/pinia.html","title":"pinia","lang":"zh-CN","frontmatter":{"description":"pinia 大仓库和小仓库的区别 大仓库（Pinia 实例）和用户小仓库（Store 实例）是 Pinia 状态管理库中的两个核心概念，它们的关系可以类比为 一个大型购物中心（大仓库）和里面的一家家独立店铺（小仓库）。 大仓库（Pinia 实例） 大仓库 是整个应用程序 全局状态的容器，由 createPinia() 方法创建。它通常在应用程序的入口文...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pinia\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-04T14:56:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zkLyons\\",\\"url\\":\\"https://zklyons.github.io/\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/zkLyons/myblog/notes/%E5%89%8D%E7%AB%AF/pinia.html"}],["meta",{"property":"og:site_name","content":"zkLyons"}],["meta",{"property":"og:title","content":"pinia"}],["meta",{"property":"og:description","content":"pinia 大仓库和小仓库的区别 大仓库（Pinia 实例）和用户小仓库（Store 实例）是 Pinia 状态管理库中的两个核心概念，它们的关系可以类比为 一个大型购物中心（大仓库）和里面的一家家独立店铺（小仓库）。 大仓库（Pinia 实例） 大仓库 是整个应用程序 全局状态的容器，由 createPinia() 方法创建。它通常在应用程序的入口文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-04T14:56:48.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-04T14:56:48.000Z"}]]},"git":{"createdTime":1756997808000,"updatedTime":1756997808000,"contributors":[{"name":"zkLyons","username":"zkLyons","email":"1649412218@qq.com","commits":1,"url":"https://github.com/zkLyons"}]},"readingTime":{"minutes":4.58,"words":1374},"filePathRelative":"notes/前端/pinia.md","excerpt":"\\n<h2>大仓库和小仓库的区别</h2>\\n<p>大仓库（Pinia 实例）和用户小仓库（Store 实例）是 Pinia 状态管理库中的两个核心概念，它们的关系可以类比为 <strong>一个大型购物中心（大仓库）和里面的一家家独立店铺（小仓库）</strong>。</p>\\n<h3>大仓库（Pinia 实例）</h3>\\n<p><strong>大仓库</strong> 是整个应用程序 <strong>全局状态的容器</strong>，由 <code>createPinia()</code> 方法创建。它通常在应用程序的入口文件 (<code>main.js</code>) 中被创建一次，并被注入到 Vue 应用中。</p>","autoDesc":true}');export{k as comp,d as data};
