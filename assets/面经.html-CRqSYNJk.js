import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as e,o as a}from"./app-DvQ7WJLz.js";const o={};function i(l,s){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="html-css" tabindex="-1"><a class="header-anchor" href="#html-css"><span>html/css</span></a></h1><h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h1><h1 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>vue</span></a></h1><h3 id="_1-请系统讲讲-vue2-与-vue3-的核心差异-响应式、api-设计、性能与编译器-。" tabindex="-1"><a class="header-anchor" href="#_1-请系统讲讲-vue2-与-vue3-的核心差异-响应式、api-设计、性能与编译器-。"><span>1.请系统讲讲 Vue2 与 Vue3 的核心差异（响应式、API 设计、性能与编译器）。</span></a></h3><p>Vue2 和 Vue3 的核心差异主要体现在以下几个方面：</p><p><strong>1. 响应式系统（底层原理的根本性变化）</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>Vue2</strong></th><th><strong>Vue3</strong></th></tr></thead><tbody><tr><td><strong>底层实现</strong></td><td>使用 <strong><code>Object.defineProperty</code></strong></td><td>使用 <strong><code>Proxy</code></strong> API</td></tr><tr><td><strong>检测限制</strong></td><td>无法监听对象属性的<strong>新增</strong>和<strong>删除</strong>，需要使用 <code>$set</code> 或 <code>$delete</code> 。</td><td>可以直接监听对象属性的<strong>新增</strong>和<strong>删除</strong>，不需要特殊 API。</td></tr><tr><td><strong>数组检测</strong></td><td>需要重写数组原型方法（如 <code>push</code>, <code>pop</code> ,<code>shift</code>,<code>unshift</code>,<code>splice</code>,<code>sort</code>,<code>reverse</code>）。</td><td><code>可以通过 </code>Proxy<code> 直接拦截数组操作，支持数组索引访问和修改。</code></td></tr></tbody></table><p><strong><code>Proxy</code> 的优势：</strong> 提供了完整的对象代理能力，性能更好，且解决了 Vue2 中无法追踪新增/删除属性的痛点。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>  &lt;div&gt;</span></span>
<span class="line"><span>    &lt;h1&gt;个人信息&lt;/h1&gt;</span></span>
<span class="line"><span>    &lt;h2&gt;name:{{ student.name }}&lt;/h2&gt;</span></span>
<span class="line"><span>    &lt;h2 v-show=&quot;student.sex&quot;&gt;sex:{{ student.sex }}&lt;/h2&gt;</span></span>
<span class="line"><span>    &lt;h2 v-show=&quot;student.height&quot;&gt;height:{{ student.height }}&lt;/h2&gt;</span></span>
<span class="line"><span>    &lt;h2&gt;hobby:{{ student.hobby }}&lt;/h2&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;button @click=&quot;addproperty&quot;&gt;添加身高属性&lt;/button&gt;</span></span>
<span class="line"><span>    &lt;button @click=&quot;deleteproperty&quot;&gt;删除性别属性&lt;/button&gt;</span></span>
<span class="line"><span>    &lt;button @click=&quot;changeproperty&quot;&gt;修改爱好属性&lt;/button&gt;</span></span>
<span class="line"><span>  &lt;/div&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  name: &quot;App&quot;,</span></span>
<span class="line"><span>  data() {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>      student: {</span></span>
<span class="line"><span>        name: &quot;zk&quot;,</span></span>
<span class="line"><span>        sex: &quot;male&quot;,</span></span>
<span class="line"><span>        hobby: [&quot;drink&quot;, &quot;walk&quot;],</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  // 3_src_vue2响应式原理</span></span>
<span class="line"><span>  methods: {</span></span>
<span class="line"><span>    addproperty() {</span></span>
<span class="line"><span>      console.log(this.student);</span></span>
<span class="line"><span>      // 在vue2环境下，添加成功，但是页面并不会响应更新</span></span>
<span class="line"><span>      console.log(this.student.height);</span></span>
<span class="line"><span>      // this.student.height = &quot;170&quot;;</span></span>
<span class="line"><span>      console.log(this.student.height);</span></span>
<span class="line"><span>      // 解决办法,记得在vue2环境下执行</span></span>
<span class="line"><span>      this.$set(this.student, &quot;height&quot;, 170);</span></span>
<span class="line"><span>      // 问题：使用数组下标添加不会响应生效</span></span>
<span class="line"><span>      // this.student.hobby[0] = &quot;play&quot;;</span></span>
<span class="line"><span>      // 解决</span></span>
<span class="line"><span>      this.student.hobby.splice(0, 0, &quot;paly&quot;);</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    changeproperty() {</span></span>
<span class="line"><span>      // 问题：使用数组下标添加不会响应生效</span></span>
<span class="line"><span>      // this.student.hobby[0] = &quot;play&quot;;</span></span>
<span class="line"><span>      // 解决</span></span>
<span class="line"><span>      this.student.hobby.splice(0, 1, &quot;paly&quot;);</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    deleteproperty() {</span></span>
<span class="line"><span>      // 同样在vue2环境下，页面不能够及时响应</span></span>
<span class="line"><span>      // delete this.student.sex;</span></span>
<span class="line"><span>      // 解决办法</span></span>
<span class="line"><span>      this.$delete(this.student, &quot;sex&quot;);</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>&lt;/script&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;style&gt;&lt;/style&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 组件编写方式（代码组织方式的变化）</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>Vue2</strong></th><th><strong>Vue3</strong></th></tr></thead><tbody><tr><td><strong>API 风格</strong></td><td><strong>选项式 API (Options API)</strong>：将逻辑分散到不同的选项中（<code>data</code>、<code>methods</code>、<code>computed</code>、<code>watch</code> 等） 。</td><td><strong>组合式 API (Composition API)</strong>：通过 <code>setup</code> 函数，将同一功能的逻辑集中写在一起 。</td></tr><tr><td><strong>逻辑复用</strong></td><td>主要通过 <code>Mixins</code> 实现，容易造成命名冲突和数据来源不清晰。</td><td>通过自定义 <strong><code>Hooks</code></strong> (例如：<code>useMousePosition</code>) 实现，逻辑清晰，类型推导友好（配合 TypeScript 6）。</td></tr><tr><td><strong>TypeScript</strong></td><td>对 TS 支持不友好，需要额外的装饰器或工具。</td><td>对 TS 支持是<strong>原生</strong>的， Composition API 更容易进行类型推导 7。</td></tr></tbody></table><p><strong>组合式 API (Composition API) 的优势：</strong> 提高了大型项目逻辑的可读性、可维护性和复用性，特别适合复杂组件的开发 8。</p><p><strong>3. 性能优化与打包体积</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>Vue2</strong></th><th><strong>Vue3</strong></th></tr></thead><tbody><tr><td><strong>编译优化</strong></td><td>缺少静态提升，全量虚拟 DOM 比对。</td><td><strong>静态提升 (Static Hoisting)</strong> 和 <strong>块级 (Block Tree) 优化</strong>。</td></tr><tr><td><strong>虚拟 DOM</strong></td><td>全量遍历比对 VDOM 树。</td><td>编译时标记静态内容，运行时只比对<strong>动态</strong>部分，减少了不必要的比对，提升了渲染性能。</td></tr><tr><td><strong>打包体积</strong></td><td>难以进行彻底的 <strong>Tree-shaking</strong>。</td><td>许多内部模块（如 <code>Transition</code>、<code>KeepAlive</code>）是按需导入的，配合 Composition API，能实现更彻底的 Tree-shaking，减小打包体积。</td></tr></tbody></table><p><strong>总结</strong></p><ol><li><p><strong>响应式系统</strong>：</p><ul><li><strong>Vue 2</strong>：基于Object.defineProperty，无法自动检测<strong>对象属性的添加/删除</strong>和<strong>数组索引变化</strong>，需借助Vue.set/Vue.delete等特殊 API。</li><li><strong>Vue 3</strong>：基于Proxy，<strong>原生支持</strong>对对象和数组的各种变化监听，无上述限制，性能更优。</li></ul></li><li><p><strong>API 设计</strong>：</p><ul><li><strong>Vue 2 (Options API)</strong>：按选项（data,methods等）组织代码，逻辑分散。复用代码使用 <strong>Mixins</strong>，容易引发命名冲突。</li><li><strong>Vue 3 (Composition API)</strong>：按<strong>逻辑功能</strong>组织代码，相关代码集中，更利于维护和阅读。复用代码使用<strong>自定义 Hook 函数</strong>，清晰灵活，且<strong>原生 TypeScript 支持极佳</strong>。</li></ul></li><li><p><strong>性能与编译器</strong>：</p><ul><li><p>Vue 3</p><p>在编译阶段进行了大量优化：</p><ul><li><strong>Tree-shaking</strong>：未使用的 API 不会打包进最终产物，体积更小。</li><li><strong>Patch Flags</strong>：编译时标记动态节点，Diff 算法时直接定位变化，大幅提升虚拟 DOM 比对效率。</li><li><strong>静态提升</strong>：将静态节点缓存，跳过重复渲染。</li></ul></li><li><p>结果：Vue 3 在<strong>打包体积、更新性能、内存占用</strong>上均优于 Vue 2。</p></li></ul></li><li><p><strong>新特性</strong>：</p><ul><li><strong>Vue 3</strong> 新增了 <strong>Teleport</strong>（将组件渲染到指定DOM）、<strong>Fragment</strong>（支持多根节点模板）等特性，解决了常见开发痛点。</li></ul></li></ol>`,16)]))}const r=n(o,[["render",i]]),c=JSON.parse('{"path":"/notes/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E7%BB%8F.html","title":"html/css","lang":"zh-CN","frontmatter":{"description":"html/css JavaScript vue 1.请系统讲讲 Vue2 与 Vue3 的核心差异（响应式、API 设计、性能与编译器）。 Vue2 和 Vue3 的核心差异主要体现在以下几个方面： 1. 响应式系统（底层原理的根本性变化） Proxy 的优势： 提供了完整的对象代理能力，性能更好，且解决了 Vue2 中无法追踪新增/删除属性的痛点。 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"html/css\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-24T14:59:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zkLyons\\",\\"url\\":\\"https://zklyons.github.io/\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/zkLyons/myblog/notes/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E7%BB%8F.html"}],["meta",{"property":"og:site_name","content":"zkLyons"}],["meta",{"property":"og:title","content":"html/css"}],["meta",{"property":"og:description","content":"html/css JavaScript vue 1.请系统讲讲 Vue2 与 Vue3 的核心差异（响应式、API 设计、性能与编译器）。 Vue2 和 Vue3 的核心差异主要体现在以下几个方面： 1. 响应式系统（底层原理的根本性变化） Proxy 的优势： 提供了完整的对象代理能力，性能更好，且解决了 Vue2 中无法追踪新增/删除属性的痛点。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-24T14:59:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-24T14:59:12.000Z"}]]},"git":{"createdTime":1761317102000,"updatedTime":1761317952000,"contributors":[{"name":"zkLyons","username":"zkLyons","email":"1649412218@qq.com","commits":5,"url":"https://github.com/zkLyons"}]},"readingTime":{"minutes":3.65,"words":1094},"filePathRelative":"notes/前端/面经.md","excerpt":"\\n<h1>JavaScript</h1>\\n<h1>vue</h1>\\n<h3>1.请系统讲讲 Vue2 与 Vue3 的核心差异（响应式、API 设计、性能与编译器）。</h3>\\n<p>Vue2 和 Vue3 的核心差异主要体现在以下几个方面：</p>\\n<p><strong>1. 响应式系统（底层原理的根本性变化）</strong></p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>特性</strong></th>\\n<th><strong>Vue2</strong></th>\\n<th><strong>Vue3</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>底层实现</strong></td>\\n<td>使用 <strong><code>Object.defineProperty</code></strong></td>\\n<td>使用 <strong><code>Proxy</code></strong> API</td>\\n</tr>\\n<tr>\\n<td><strong>检测限制</strong></td>\\n<td>无法监听对象属性的<strong>新增</strong>和<strong>删除</strong>，需要使用 <code>$set</code> 或 <code>$delete</code> 。</td>\\n<td>可以直接监听对象属性的<strong>新增</strong>和<strong>删除</strong>，不需要特殊 API。</td>\\n</tr>\\n<tr>\\n<td><strong>数组检测</strong></td>\\n<td>需要重写数组原型方法（如 <code>push</code>, <code>pop</code> ,<code>shift</code>,<code>unshift</code>,<code>splice</code>,<code>sort</code>,<code>reverse</code>）。</td>\\n<td><code>可以通过 </code>Proxy<code> 直接拦截数组操作，支持数组索引访问和修改。</code></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{r as comp,c as data};
