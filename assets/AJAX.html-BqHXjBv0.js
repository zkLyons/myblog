import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as n,o as l}from"./app-BhqQm65E.js";const t="/myblog/assets/QQ_1742012407781-DA3xEciv.png",e="/myblog/assets/QQ_1741934962698-Cy-omRHl.png",p="/myblog/assets/QQ_1741935566106-DDGfxY7W.png",h="/myblog/assets/QQ_1741935132053-DqkEh12s.png",k="/myblog/assets/QQ_1741935631752-BQTb52c-.png",r="/myblog/assets/QQ_1741936197424-D2DnPCy9.png",d="/myblog/assets/QQ_1741936222974-BI-J5nnY.png",o="/myblog/assets/image-20250427160728448-Dtwq6vU2.png",g={};function c(A,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax"><span>AJAX</span></a></h1><h3 id="post和ge请求有什么区别" tabindex="-1"><a class="header-anchor" href="#post和ge请求有什么区别"><span>POST和ge请求有什么区别</span></a></h3><p><code>GET</code> 和 <code>POST</code> 是 HTTP 协议中最常用的两种请求方法，它们在功能、用途、安全性和性能等方面存在显著区别。以下是它们的主要区别：</p><hr><ol><li><strong>用途</strong></li></ol><ul><li><p><strong>GET 请求</strong>：</p><ul><li><strong>用途</strong>：用于从服务器<strong>获取资源</strong>，例如请求网页内容、API 数据等。</li><li><strong>特点</strong>：GET 请求不会对服务器上的资源进行修改，因此是<strong>幂等的</strong>（即多次请求的结果相同）。</li></ul></li><li><p><strong>POST 请求</strong>：</p><ul><li><strong>用途</strong>：用于向服务器<strong>提交数据</strong>，例如提交表单、创建新资源等。</li><li><strong>特点</strong>：POST 请求通常会修改服务器上的资源，因此是<strong>非幂等的</strong>（多次请求可能会导致不同的结果）。</li></ul></li></ul><hr><ol start="2"><li><strong>请求参数的传递方式</strong></li></ol><ul><li><p><strong>GET 请求</strong>：</p><ul><li><strong>参数传递</strong>：通过 URL 的查询字符串（<code>?key=value</code>）传递参数。</li><li><strong>示例</strong>：<code>https://example.com/data?id=123&amp;name=Kimi</code></li><li><strong>限制</strong>：由于 URL 的长度有限制（通常在 2048 个字符以内），因此 GET 请求适合传递少量参数。</li><li><strong>可见性</strong>：参数直接暴露在 URL 中，容易被用户看到和记录。</li></ul></li><li><p><strong>POST 请求</strong>：</p><ul><li><p><strong>参数传递</strong>：通过请求正文（Body）传递参数，支持多种格式（如 JSON、表单数据等）。</p></li><li><p><strong>示例</strong>：</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-http"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">POST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /api </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application/json</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Kimi&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>限制</strong>：请求正文的大小通常没有限制，适合传递大量数据。</p></li><li><p><strong>可见性</strong>：参数隐藏在请求正文中，不会暴露在 URL 中，相对更安全。</p></li></ul></li></ul><hr><ol start="3"><li><strong>安全性</strong></li></ol><ul><li><p><strong>GET 请求</strong>：</p><ul><li><strong>安全性较低</strong>：由于参数暴露在 URL 中，容易被记录在浏览器历史、服务器日志或网络代理中，不适合传递敏感信息（如密码、个人隐私等）。</li></ul></li><li><p><strong>POST 请求</strong>：</p><ul><li><strong>安全性较高</strong>：参数隐藏在请求正文中，不会暴露在 URL 中，相对更安全。但需要注意，POST 请求本身并不加密，数据仍然可能被中间人攻击截获。如果需要更高的安全性，应使用 HTTPS 协议。</li></ul></li></ul><hr><ol start="4"><li><strong>幂等性</strong></li></ol><ul><li><p><strong>GET 请求</strong>：</p><ul><li><strong>幂等的</strong>：多次发送相同的 GET 请求，结果是相同的，不会对服务器产生副作用。</li></ul></li><li><p><strong>POST 请求</strong>：</p><ul><li><strong>非幂等的</strong>：多次发送相同的 POST 请求可能会导致不同的结果（例如多次提交表单可能会创建多个资源）。</li></ul></li></ul><hr><ol start="5"><li><strong>缓存机制</strong></li></ol><ul><li><p><strong>GET 请求</strong>：</p><ul><li><strong>可缓存</strong>：由于 GET 请求是幂等的，浏览器和服务器可以对 GET 请求的结果进行缓存，提高性能。</li></ul></li><li><p><strong>POST 请求</strong>：</p><ul><li><strong>不可缓存</strong>：POST 请求通常不会被缓存，因为它们可能会修改服务器的状态。</li></ul></li></ul><hr><ol start="6"><li><strong>收藏和书签</strong></li></ol><ul><li><p><strong>GET 请求</strong>：</p><ul><li><strong>可收藏</strong>：由于 GET 请求的 URL 包含所有参数，可以直接被收藏或作为书签使用。</li></ul></li><li><p><strong>POST 请求</strong>：</p><ul><li><strong>不可收藏</strong>：POST 请求的参数在请求正文中，无法通过 URL 表示，因此不适合收藏或作为书签。</li></ul></li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><hr><p>使用场景</p><ul><li><p><strong>使用 GET 请求</strong>：</p><ul><li>搜索结果页面（如 <code>https://example.com/search?q=keyword</code>）。</li><li>获取网页内容或 API 数据。</li><li>链接（如 <code>&lt;a href=&quot;https://example.com/data?id=123&quot;&gt;</code>）。</li></ul></li><li><p><strong>使用 POST 请求</strong>：</p><ul><li>提交表单（如用户注册、登录）。</li><li>创建新资源（如上传文件、提交评论）。</li><li>修改服务器状态（如更新用户信息）。</li></ul></li></ul><hr><p>示例代码</p><p>GET 请求示例</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> xhr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> XMLHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://example.com/data?id=123&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//监听事件是否发生了改变。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onreadystatechange</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">readyState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Response:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">responseText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>POST 请求示例</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> xhr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> XMLHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;POST&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://example.com/api&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setRequestHeader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Content-Type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;application/json;charset=UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Kimi&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onreadystatechange</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">readyState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Response:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">responseText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>希望这些信息能帮助你更好地理解 GET 和 POST 请求的区别！</p><h3 id="send-有什么用" tabindex="-1"><a class="header-anchor" href="#send-有什么用"><span>send()有什么用</span></a></h3><p>在 <code>XMLHttpRequest</code> 对象中，<code>send()</code> 方法是一个关键的方法，用于实际发送 HTTP 请求。它的作用是将请求发送到服务器，并等待服务器的响应。<code>send()</code> 的行为会根据请求的类型（如 GET、POST、PUT 等）和请求的配置（如请求头部、请求正文等）而有所不同。</p><p><code>send()</code> 的作用</p><ol><li><p><strong>发送请求</strong>：</p><ul><li><code>send()</code> 是将客户端的请求发送到服务器的实际动作。在调用 <code>send()</code> 之前，你需要通过 <code>XMLHttpRequest</code> 对象配置好请求的类型（通过 <code>open()</code> 方法）、URL、请求头部等信息。</li><li>调用 <code>send()</code> 之后，请求会被发送到指定的服务器地址。</li></ul></li><li><p><strong>处理请求正文</strong>：</p><ul><li>对于某些请求类型（如 GET 请求），<code>send()</code> 方法通常不需要传递任何参数，因为 GET 请求的参数通常通过 URL 的查询字符串传递。</li><li>对于 POST、PUT 等请求，<code>send()</code> 方法可以接受一个参数，这个参数是请求的正文（Body）。正文的格式可以是字符串、JSON、表单数据等，具体取决于请求的 <code>Content-Type</code>。</li></ul></li><li><p><strong>触发异步处理</strong>：</p><ul><li>如果 <code>XMLHttpRequest</code> 是以异步方式配置的（<code>open()</code> 方法的第三个参数为 <code>true</code>），<code>send()</code> 方法会立即返回，而不会等待服务器响应。客户端可以通过监听 <code>onreadystatechange</code> 事件或使用 <code>Promise</code>（在现代开发中更推荐使用 <code>fetch</code> API）来处理服务器的响应。</li><li>如果是同步请求（<code>open()</code> 方法的第三个参数为 <code>false</code>），<code>send()</code> 方法会阻塞，直到服务器返回响应。</li></ul></li></ol><p>示例</p><p>示例 1：发送 GET 请求</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> xhr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> XMLHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://example.com/data&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 异步请求</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onreadystatechange</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">readyState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Response:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">responseText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 发送 GET 请求，无需传递参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：发送 POST 请求</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> xhr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> XMLHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;POST&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://example.com/api&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 异步请求</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setRequestHeader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Content-Type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;application/json;charset=UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onreadystatechange</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">readyState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Response:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">responseText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Kimi&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    age</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 25</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 发送 POST 请求，传递 JSON 格式的请求正文</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>send()</code> 的参数</p><ul><li><strong>无参数</strong>：对于 GET 请求，<code>send()</code> 不需要参数。</li><li><strong>有参数</strong>：对于 POST、PUT 等请求，<code>send()</code> 可以传递以下类型的参数： <ul><li><strong>字符串</strong>：如 JSON 格式的字符串。</li><li><strong><code>FormData</code> 对象</strong>：用于发送表单数据。</li><li><strong><code>Blob</code> 或 <code>File</code> 对象</strong>：用于上传文件。</li><li><strong><code>Document</code> 对象</strong>：用于发送 XML 数据。</li></ul></li></ul><h3 id="同步和异步请求实例" tabindex="-1"><a class="header-anchor" href="#同步和异步请求实例"><span>同步和异步请求实例</span></a></h3><figure><img src="`+t+`" alt="QQ_1742012407781" tabindex="0" loading="lazy"><figcaption>QQ_1742012407781</figcaption></figure><p><u><strong>同步请求场景</strong></u></p><ol><li><p><strong>用户登录验证</strong>：</p><ul><li>用户在登录页面输入用户名和密码后，点击“登录”按钮。</li><li>系统需要立即验证用户名和密码是否正确，并在验证完成后才允许用户继续操作。</li><li><strong>同步请求</strong>：系统会等待服务器返回验证结果，期间用户无法进行其他操作，直到验证完成。</li></ul></li><li><p><strong>数据一致性要求高的场景</strong>：</p><ul><li>例如，在银行转账系统中，用户提交转账请求后，必须等待服务器确认转账成功，才能显示转账完成的结果。</li><li><strong>同步请求</strong>：确保数据的一致性，用户在等待期间无法进行其他操作，直到服务器返回结果。</li></ul></li><li><p><strong>表单提交后的确认页面</strong>：</p><ul><li>用户填写表单并提交后，系统需要立即处理表单数据，并在处理完成后显示确认页面。</li><li><strong>同步请求</strong>：系统会等待服务器处理表单数据，并在处理完成后才显示确认页面，期间用户无法进行其他操作。</li></ul></li></ol><p><em><strong><u>异步请求场景</u></strong></em></p><ol><li><p><strong>搜索建议</strong>：</p><ul><li>用户在搜索引擎中输入关键词时，搜索引擎会实时提供搜索建议。</li><li><strong>异步请求</strong>：用户输入关键词的同时，系统会异步发送请求到服务器，获取搜索建议，并在用户继续输入时实时更新建议列表，用户可以继续输入，不会感到界面卡顿。</li></ul></li><li><p><strong>社交媒体动态更新</strong>：</p><ul><li>用户在社交媒体平台上浏览动态时，平台会自动加载更多的动态。</li><li><strong>异步请求</strong>：用户浏览动态时，系统会异步发送请求到服务器，获取更多的动态数据，并在数据返回后更新页面，用户可以继续浏览，不会感到界面卡顿。</li></ul></li><li><p><strong>在线购物的实时库存检查</strong>：</p><ul><li>用户在在线购物网站上选择商品时，系统会实时检查库存，并显示是否有货。</li><li><strong>异步请求</strong>：用户选择商品的同时，系统会异步发送请求到服务器，检查库存，并在数据返回后更新库存显示，用户可以继续浏览商品，不会感到界面卡顿。</li></ul></li><li><p><strong>网页版的即时通讯工具</strong>：</p><ul><li>用户在聊天窗口中发送消息后，系统会实时发送消息并显示对方的回复。</li><li><strong>异步请求</strong>：用户发送消息的同时，系统会异步发送请求到服务器，发送消息后，用户可以继续输入其他内容，不会感到界面卡顿。</li></ul></li></ol><p>总结</p><ul><li><p><strong>同步请求</strong>：</p><ul><li>适用于需要立即获取结果且不允许中断的操作。</li><li>例如：用户登录验证、数据一致性要求高的场景、表单提交后的确认页面。</li><li>特点：阻塞后续代码执行，界面冻结，用户体验差。</li></ul></li><li><p><strong>异步请求</strong>：</p><ul><li>适用于大多数需要后台处理的场景，用户可以继续进行其他操作。</li><li>例如：搜索建议、社交媒体动态更新、在线购物的实时库存检查、网页版的即时通讯工具。</li><li>特点：不阻塞后续代码执行，界面保持响应，用户体验好。</li></ul></li></ul><p>通过这些现实场景，你可以更好地理解同步和异步请求的区别以及它们的适用场景。</p><h3 id="axios" tabindex="-1"><a class="header-anchor" href="#axios"><span>axios</span></a></h3><p>封装了ajax，简化了操作指令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>axios.get(&#39;http://localhost:5000/students&#39;).then(</span></span>
<span class="line"><span>					response=&gt;{</span></span>
<span class="line"><span>						console.log(&#39;成功了&#39;,response.data)</span></span>
<span class="line"><span>					},</span></span>
<span class="line"><span>					error=&gt;{</span></span>
<span class="line"><span>						console.log(&#39;失败了&#39;,error)</span></span>
<span class="line"><span>					}</span></span>
<span class="line"><span>				)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>    mounted(){</span></span>
<span class="line"><span>    	axios.get(&#39;http://localhost:8080/api/students&#39;).then(</span></span>
<span class="line"><span>					response=&gt;{</span></span>
<span class="line"><span>						console.log(&#39;成功了&#39;,response.data)</span></span>
<span class="line"><span>                        this.personList=response.data</span></span>
<span class="line"><span>                         console.log(this.personList,1)//能够正确打印结果</span></span>
<span class="line"><span></span></span>
<span class="line"><span>					},</span></span>
<span class="line"><span>					error=&gt;{</span></span>
<span class="line"><span>						console.log(&#39;失败了&#39;,error)</span></span>
<span class="line"><span>					}</span></span>
<span class="line"><span>				)</span></span>
<span class="line"><span>		console.log(this.personList,1)//不能够正确打印结果，因为axios是一个异步操作，等待服务器返回数据的同时，之后的代码会继续执行，也就是这行语句比axios先执行完。</span></span>
<span class="line"><span>    },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域"><span>跨域</span></a></h3><p>跨域本身是浏览器向服务器请求数据时出现的问题。</p><p>以下是一些常见的跨域场景：</p><ul><li><strong>不同域名</strong>：<code>http://example.com</code> 和 <code>http://anotherexample.com</code>。</li><li><strong>不同端口</strong>：<code>http://example.com:8080</code> 和 <code>http://example.com:9090</code>。</li><li><strong>不同协议</strong>：<code>http://example.com</code> 和 <code>https://example.com</code>。</li></ul><p><strong>解决方案：代理服务器</strong></p><p>1.nginx</p><p>2.vue-cli开启代理服务器</p><p>在vue中配置代理服务器</p><p>打开vue-cli官方网站：</p><h4 id="使用vue-cli代理" tabindex="-1"><a class="header-anchor" href="#使用vue-cli代理"><span>使用vue-cli代理：</span></a></h4><figure><img src="`+e+'" alt="QQ_1741934962698" tabindex="0" loading="lazy"><figcaption>QQ_1741934962698</figcaption></figure><figure><img src="'+p+'" alt="QQ_1741935566106" tabindex="0" loading="lazy"><figcaption>QQ_1741935566106</figcaption></figure><figure><img src="'+h+'" alt="QQ_1741935132053" tabindex="0" loading="lazy"><figcaption>QQ_1741935132053</figcaption></figure><p>第二种方式：</p><figure><img src="'+k+'" alt="QQ_1741935631752" tabindex="0" loading="lazy"><figcaption>QQ_1741935631752</figcaption></figure><figure><img src="'+r+'" alt="QQ_1741936197424" tabindex="0" loading="lazy"><figcaption>QQ_1741936197424</figcaption></figure><figure><img src="'+d+'" alt="QQ_1741936222974" tabindex="0" loading="lazy"><figcaption>QQ_1741936222974</figcaption></figure><h4 id="使用vite代理" tabindex="-1"><a class="header-anchor" href="#使用vite代理"><span>使用vite代理：</span></a></h4><p>后端服务器地址：<a href="http://localhost:5000//students" target="_blank" rel="noopener noreferrer">http://localhost:5000//students</a></p><p>浏览器请求地址:<a href="http://localhost:5173" target="_blank" rel="noopener noreferrer">http://localhost:5173</a></p><p>代理服务器地址：<a href="http://localhost:5173" target="_blank" rel="noopener noreferrer">http://localhost:5173</a></p><figure><img src="'+o+`" alt="image-20250427160728448" tabindex="0" loading="lazy"><figcaption>image-20250427160728448</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>//vite.config.ts</span></span>
<span class="line"><span>   server: {</span></span>
<span class="line"><span>      proxy: {</span></span>
<span class="line"><span>        &#39;/api&#39;: {</span></span>
<span class="line"><span>          target: &#39;http://localhost:5000&#39;, // 后端地址</span></span>
<span class="line"><span>          changeOrigin: true,</span></span>
<span class="line"><span>          rewrite: (path) =&gt; path.replace(/^\\/api/, &#39;&#39;), // 可选：去掉 \`/api\` 前缀</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>是否需要保留 <code>/api</code></strong>：</p><ul><li>如果后端接口本身有 <code>/api</code> 前缀（如 <code>http://localhost:5000/api/students</code>），则不需要 <code>rewrite</code></li><li>如果后端接口没有 <code>/api</code> 前缀（如 <code>http://localhost:5000/students</code>），则需要 <code>rewrite</code> 去除前缀</li></ul><p>发送数据请求：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>let getData = () =&gt; {</span></span>
<span class="line"><span>    // http://localhost:5173</span></span>
<span class="line"><span>    axios.get(&#39;/api/students&#39;).then(</span></span>
<span class="line"><span>        res =&gt; {</span></span>
<span class="line"><span>            console.log(res.data, 45667)</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        err =&gt; {</span></span>
<span class="line"><span>            console.log(err)</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,83)]))}const u=i(g,[["render",c]]),v=JSON.parse('{"path":"/notes/%E5%89%8D%E7%AB%AF/AJAX.html","title":"AJAX","lang":"zh-CN","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":":","6":"a","7":"j","8":"a","9":"x","10":"|","11":"a","12":"x","13":"i","14":"o","15":"s","description":"AJAX POST和ge请求有什么区别 GET 和 POST 是 HTTP 协议中最常用的两种请求方法，它们在功能、用途、安全性和性能等方面存在显著区别。以下是它们的主要区别： 用途 GET 请求： 用途：用于从服务器获取资源，例如请求网页内容、API 数据等。 特点：GET 请求不会对服务器上的资源进行修改，因此是幂等的（即多次请求的结果相同）。 P...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AJAX\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T10:33:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zkLyons\\",\\"url\\":\\"https://zklyons.github.io/\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/zkLyons/myblog/notes/%E5%89%8D%E7%AB%AF/AJAX.html"}],["meta",{"property":"og:site_name","content":"zkLyons"}],["meta",{"property":"og:title","content":"AJAX"}],["meta",{"property":"og:description","content":"AJAX POST和ge请求有什么区别 GET 和 POST 是 HTTP 协议中最常用的两种请求方法，它们在功能、用途、安全性和性能等方面存在显著区别。以下是它们的主要区别： 用途 GET 请求： 用途：用于从服务器获取资源，例如请求网页内容、API 数据等。 特点：GET 请求不会对服务器上的资源进行修改，因此是幂等的（即多次请求的结果相同）。 P..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T10:33:57.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T10:33:57.000Z"}]]},"git":{"createdTime":1756288627000,"updatedTime":1756290837000,"contributors":[{"name":"zkLyons","username":"zkLyons","email":"1649412218@qq.com","commits":4,"url":"https://github.com/zkLyons"}]},"readingTime":{"minutes":9.4,"words":2820},"filePathRelative":"notes/前端/AJAX.md","excerpt":"\\n<h3>POST和ge请求有什么区别</h3>\\n<p><code>GET</code> 和 <code>POST</code> 是 HTTP 协议中最常用的两种请求方法，它们在功能、用途、安全性和性能等方面存在显著区别。以下是它们的主要区别：</p>\\n<hr>\\n<ol>\\n<li><strong>用途</strong></li>\\n</ol>\\n<ul>\\n<li>\\n<p><strong>GET 请求</strong>：</p>\\n<ul>\\n<li><strong>用途</strong>：用于从服务器<strong>获取资源</strong>，例如请求网页内容、API 数据等。</li>\\n<li><strong>特点</strong>：GET 请求不会对服务器上的资源进行修改，因此是<strong>幂等的</strong>（即多次请求的结果相同）。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>POST 请求</strong>：</p>\\n<ul>\\n<li><strong>用途</strong>：用于向服务器<strong>提交数据</strong>，例如提交表单、创建新资源等。</li>\\n<li><strong>特点</strong>：POST 请求通常会修改服务器上的资源，因此是<strong>非幂等的</strong>（多次请求可能会导致不同的结果）。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{u as comp,v as data};
